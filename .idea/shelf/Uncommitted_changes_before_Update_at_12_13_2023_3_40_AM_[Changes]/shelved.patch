Index: src/main/java/com/example/watch_it/Admin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.watch_it;\r\nimport java.io.*;\r\nimport java.time.Month;\r\nimport java.time.Period;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.time.LocalDate;\r\nimport java.util.Map;\r\n\r\npublic class Admin {\r\n    private String username;\r\n    private int password;\r\n\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    public void setUsername(String username) {\r\n        this.username = username;\r\n    }\r\n\r\n    public int getPassword() {\r\n        return password;\r\n    }\r\n\r\n    public void setPassword(int password) {\r\n        this.password = password;\r\n    }\r\n\r\n    //counters gonna be pairs ,key for the enum class value for repentance -- javafx???\r\n    public static int basicPlanCounter;\r\n    public static int standardPlanCounter;\r\n    public static int premiumPlanCounter;\r\n    private  static final int MONTHSNUMBER = 12;\r\n    static final short PLANINDEX = 6;\r\n    static final short USERNAMEINDEX = 1;\r\n    static final short TYPEINDEX = 0;\r\n    static final short PASSWORDINDEX = 2;\r\n    static final short FIRSTNAMEINDEX = 4;\r\n    static final short LASTNAMEINDEX = 5;\r\n    static final short EMAILINDEX = 7;\r\n    static final short IDINDEX = 3;\r\n    private static short STARTDATEINDEX = 8;\r\n\r\n    public static ArrayList<String> movies = new ArrayList<String>();\r\n    public static ArrayList<String> directors = new ArrayList<String>();\r\n    public static ArrayList<String> casts = new ArrayList<String>();\r\n    public static ArrayList<String> admins = new ArrayList<String>();\r\n    public static ArrayList<String> users = new ArrayList<String>();\r\n    public static ArrayList<String> topRatedMovies;\r\n\r\n    public static void readFile(File file) {\r\n        ArrayList<String> arrayList = new ArrayList<String>();\r\n        try {\r\n            String line = \"\";\r\n            BufferedReader b = new BufferedReader(new FileReader(file));\r\n            while ((line = b.readLine()) != null) {\r\n                String [] row = line.split(\",\");\r\n                if(row[TYPEINDEX].equals(\"user\"))\r\n                    users.add(line);\r\n                else if (row[TYPEINDEX].equals(\"cast\"))\r\n                    casts.add(line);\r\n                else if(row[TYPEINDEX].equals(\"director\"))\r\n                    directors.add(line);\r\n                else\r\n                    admins.add(line);\r\n            }\r\n            b.close();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n    public static void readMovieOneLine(File file) {\r\n        ArrayList<String> arrayList = new ArrayList<String>();\r\n        try {\r\n            String line = \"\";\r\n            BufferedReader b = new BufferedReader(new FileReader(file));\r\n            while ((line = b.readLine()) != null) {\r\n                movies.add(line);\r\n            }\r\n            b.close();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n    public static void writeOnFile(File file){\r\n        try {\r\n            BufferedWriter b = new BufferedWriter(new FileWriter(file));\r\n            for(String index:users){\r\n                b.write(index);\r\n                b.newLine();\r\n            }\r\n            for(String index:movies){\r\n                b.write(index);\r\n                b.newLine();\r\n            }\r\n            for(String index:casts){\r\n                b.write(index);\r\n                b.newLine();\r\n            }\r\n            for(String index:directors){\r\n                b.write(index);\r\n                b.newLine();\r\n            }\r\n            for(String index:admins){\r\n                b.write(index);\r\n                b.newLine();\r\n            }\r\n            b.close();\r\n        }\r\n        catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n    //if the record exists in database >> gonna return the whole record[don't forget to split it]\r\n    //otherwise gonna return null [make sure to check before dealing with return val].\r\n\r\n    //returned string isn't splitted\r\n    public static String existsInFile(ArrayList<String> arrayList, String username){\r\n        boolean exist = false;\r\n        String[] eachLine;\r\n        for (String index: arrayList){\r\n            eachLine = index.split(\",\");\r\n            if(eachLine[USERNAMEINDEX].equals(username)){\r\n                return index;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    public static boolean existsInFile(String username){;\r\n        String[] eachLine;\r\n        for (String index: users){\r\n            eachLine = index.split(\",\");\r\n            if(eachLine[USERNAMEINDEX].equals(username)){\r\n                return  true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //record to be deleted is not splitted\r\n    public static void deleteOneRecord(ArrayList<String> arrayList, String record){\r\n        arrayList.remove(record);\r\n    }\r\n    public static void changeCell(ArrayList<String> arrayList, String username, String oldCell, String newCell){\r\n        String recuiredLine = existsInFile(arrayList, username);\r\n        if(recuiredLine != null) {\r\n            String[] row = recuiredLine.split(\",\");\r\n            try {\r\n                for (int index = 0; index < row.length; index++) {\r\n                    if (row[index].equals(username))\r\n                        row[index] = newCell;\r\n                }\r\n            }catch (ArrayIndexOutOfBoundsException e){\r\n            }\r\n            arrayList.set(arrayList.indexOf(recuiredLine), String.join(\",\", row));\r\n        }\r\n    }\r\n    //enum ----------------\r\n    public static String getSpecificCellForUser(String type, String username, int index){\r\n        if(type.equals(\"user\")){\r\n            String wantedRecord = existsInFile(users, username);\r\n            String []row = wantedRecord.split(\",\");\r\n            return row[index];\r\n        }\r\n        else if(type.equals(\"admin\")){\r\n\r\n        }\r\n        else if(type.equals(\"cast\")){\r\n\r\n        }\r\n        else if (type.equals(\"director\")) {\r\n\r\n        }\r\n        else if (type.equals(\"movie\")) {\r\n\r\n        }\r\n        return null;\r\n    }\r\n\r\n    //working just fine ^^^\r\n    static Subscription.Plans getMostSubscripedPlan(){\r\n        Subscription.Plans plan = null;\r\n        HashMap<Integer,Subscription.Plans> map = new HashMap<>();\r\n\r\n        map.put(basicPlanCounter,Subscription.Plans.BASIC);\r\n        map.put(standardPlanCounter,Subscription.Plans.STANDARD);\r\n        map.put(premiumPlanCounter,Subscription.Plans.PREMIUM);\r\n\r\n        int max = Math.max(standardPlanCounter,Math.max(basicPlanCounter,premiumPlanCounter));\r\n\r\n        plan = map.get(max);\r\n\r\n        return plan;\r\n    }\r\n    static void getUsersInEachPlan(){\r\n        basicPlanCounter = 0;\r\n        standardPlanCounter = 0;\r\n        premiumPlanCounter = 0;\r\n        for (String index: users){\r\n            String []line = index.split(\",\");\r\n            HashMap<Integer,Subscription.Plans> map = new HashMap<>();\r\n            if(line[PLANINDEX].equals(\"basic\"))\r\n                basicPlanCounter++;\r\n            else if (line[PLANINDEX].equals(\"standard\"))\r\n                standardPlanCounter++;\r\n            else\r\n                premiumPlanCounter++;\r\n        }\r\n    }\r\n\r\n    //assuming all dates are valid and users still subscribed.\r\n    public static int getMonth(Month month){\r\n        return switch (month) {\r\n            case JANUARY -> 1;\r\n            case FEBRUARY -> 2;\r\n            case MARCH -> 3;\r\n            case APRIL -> 4;\r\n            case MAY -> 5;\r\n            case JUNE -> 6;\r\n            case JULY -> 7;\r\n            case AUGUST -> 8;\r\n            case SEPTEMBER -> 9;\r\n            case OCTOBER -> 10;\r\n            case NOVEMBER -> 11;\r\n            case DECEMBER -> 12;\r\n        };\r\n    }\r\n    public static Month getMonth(int monthNumber){\r\n        return switch (monthNumber) {\r\n            case 1 -> Month.JANUARY;\r\n            case 2 -> Month.FEBRUARY;\r\n            case 3 -> Month.MARCH;\r\n            case 4 -> Month.APRIL;\r\n            case 5 -> Month.MAY;\r\n            case 6 -> Month.JUNE;\r\n            case 7 -> Month.JULY;\r\n            case 8 -> Month.AUGUST;\r\n            case 9 -> Month.SEPTEMBER;\r\n            case 10 -> Month.OCTOBER;\r\n            case 11 -> Month.NOVEMBER;\r\n            case 12 -> Month.DECEMBER;\r\n            default -> null;\r\n        };\r\n    }\r\n    static Month monthWithMostRevenue(){\r\n        Month month = null;\r\n        int [] monthsRevenue = new int[MONTHSNUMBER];\r\n        for(String user: users){\r\n            String[] data = user.split(\",\");\r\n            String plan = data[PLANINDEX];\r\n            LocalDate startDate = LocalDate.parse(data[STARTDATEINDEX]);\r\n            LocalDate todaysDate = LocalDate.now();\r\n            int startMonth = getMonth(startDate.getMonth());\r\n            int todaysmonth = getMonth(todaysDate.getMonth());\r\n            int differenceMonths = todaysmonth - startMonth;\r\n            if(startDate.getYear() != todaysDate.getYear())\r\n                differenceMonths = (MONTHSNUMBER - startMonth) + todaysmonth;\r\n\r\n            while(differenceMonths >= 0){\r\n                if(plan.equals(\"basic\")){\r\n                    monthsRevenue[(startMonth + differenceMonths)] += 10;\r\n                }\r\n                else if (plan.equals(\"standard\")) {\r\n                    monthsRevenue[(startMonth + differenceMonths)] += 20;\r\n                }\r\n                else{\r\n                    monthsRevenue[(startMonth + differenceMonths)] += 30;\r\n                }\r\n                differenceMonths--;\r\n            }\r\n        }\r\n        int []check = new int[MONTHSNUMBER];\r\n        System.arraycopy(monthsRevenue, 0, check, 0, MONTHSNUMBER);\r\n        Arrays.sort(check);\r\n        int recuiredMonth = 0;\r\n        for(int i=0; i<MONTHSNUMBER; i++){\r\n            if(monthsRevenue[i] == check[1])\r\n            {\r\n                recuiredMonth = i + 1;\r\n                break;\r\n            }\r\n        }\r\n        return getMonth(recuiredMonth);\r\n    }\r\n    static void getUserMovieLists(String user, ArrayList<String> watched_movies, ArrayList<String> toBeWatched_movies){\r\n        boolean toBeWatched = false;\r\n        boolean watched = false;\r\n        int watchedCounter = -1;\r\n        int toBeWatchedCounter = 0;\r\n        String[] eachLine = user.split(\",\");\r\n        for (String data:eachLine) {\r\n            if(data.equals(\"watched\"))\r\n                watched = true;\r\n            if(data.equals(\"to be watched\")) {\r\n                watched = false;\r\n                toBeWatched = true;\r\n            }\r\n            if(watched) {\r\n                watchedCounter++;\r\n                if(watchedCounter != 0 && watchedCounter%2!=0)\r\n                    watched_movies.add(data);\r\n            }\r\n            if(toBeWatched && toBeWatchedCounter == 1)\r\n                toBeWatched_movies.add(data);\r\n            if (toBeWatched && toBeWatchedCounter == 0)\r\n                toBeWatchedCounter = 1;\r\n        }\r\n    }\r\n    //as objects\r\n    static void getUserMovieLists(String userData,User user,ArrayList<UserWatchRecord> watched_movies, ArrayList<Movie> toBeWatched_movies){\r\n        if(userData != null)\r\n        {\r\n            boolean toBeWatched = false;\r\n            boolean watched = false;\r\n            int watchedCounter = -1;\r\n            int toBeWatchedCounter = 0;\r\n            Movie movie_to_watch = new Movie();\r\n            String[] eachLine = userData.split(\",\");\r\n            for (int i=0; i<eachLine.length; i++) {\r\n                if (eachLine[i].equals(\"watched\"))\r\n                    watched = true;\r\n                if (eachLine[i].equals(\"to be watched\")) {\r\n                    watched = false;\r\n                    toBeWatched = true;\r\n                }\r\n                if (watched){\r\n                    watchedCounter++;\r\n                    if(watchedCounter % 2 != 0 )\r\n                    {\r\n                        for (String oneMovie : movies) {\r\n                            String[] arr = oneMovie.split(\",\");\r\n                            if (arr[1].equals(eachLine[i]))\r\n                                watched_movies.add(getWatchedMovie(arr[i], Integer.parseInt(arr[i+1])));\r\n                        }\r\n                    }\r\n                }\r\n                if (toBeWatched && toBeWatchedCounter == 1)\r\n                    toBeWatched_movies.add(getOneMovie(eachLine[i]));\r\n                if (toBeWatched && toBeWatchedCounter == 0)\r\n                    toBeWatchedCounter = 1;\r\n            }\r\n        }\r\n        user.Watched_Movies.addAll(watched_movies);\r\n        user.Movies_For_Later.addAll(toBeWatched_movies);\r\n    }\r\n    static UserWatchRecord getWatchedMovie(String title, int rate){\r\n        UserWatchRecord movie = new UserWatchRecord();\r\n        for (String oneMovie: movies){\r\n            String []arr = oneMovie.split(\",\");\r\n            if(arr[1].equals(title))\r\n            {\r\n                movie.movie.setTitle(arr[1]);\r\n                movie.movie.setId(Integer.parseInt(arr[2]));\r\n                movie.movie.setRelease_date(LocalDate.parse(arr[3]));\r\n                // movie.setDuration(Integer.parseInt(arr[4]));\r\n                //director,case lazm hykono strings msh obj.\r\n                //movie.setDirector(arr[7]);\r\n                movie.movie.setBudget(arr[11]);\r\n                movie.movie.setCountry(arr[10]);\r\n                movie.setRating(rate);\r\n                //movie.setDirector(getDirector());\r\n            }\r\n        }\r\n        return movie;\r\n    }\r\n    static void getAllMovies(){\r\n        ArrayList<Movie> arrayList = new ArrayList<Movie>();\r\n        for(String oneMovie: movies){\r\n            String[] arr = oneMovie.split(\",\");\r\n            System.out.println(arr[1]);\r\n            String name = arr[1];\r\n            arrayList.add(getOneMovie(name));\r\n        }\r\n        Movie.allmovies.addAll(arrayList);\r\n        //Movie.getDiffGenres();\r\n    }\r\n    static ArrayList<Movie> getMoviesObjs(){\r\n        ArrayList<Movie> arrayList = new ArrayList<Movie>();\r\n        Movie movie = new Movie();\r\n        for(String s: movies){\r\n            arrayList.add(getOneMovie_(s));\r\n        }\r\n        return arrayList;\r\n    }\r\n    static Movie getOneMovie_(String movieString){\r\n        Movie movie = new Movie();\r\n        String[] arr = movieString.split(\",\");\r\n        movie.setTitle(arr[1]);\r\n        movie.setId(Integer.parseInt(arr[0]));\r\n        movie.setRelease_date(LocalDate.parse(arr[3]));\r\n        movie.setDescription(arr[2]);\r\n        movie.setRunning_time(arr[4]);\r\n        movie.setBudget(arr[9]);\r\n        movie.setCountry(arr[8]);\r\n        movie.setLanguage(arr[6]);\r\n        movie.setImdb_score(Integer.parseInt(arr[7]));\r\n        movie.setRevenue(arr[10]);\r\n        movie.setPoster_path(arr[11]);\r\n        movie.setDirector(getDirector(arr[5]));\r\n        movie.setDirectorName(arr[5]);\r\n        ArrayList<String> cast = new ArrayList<String>();\r\n        ArrayList<String> genres = new ArrayList<String>();\r\n        castAndGenres(movieString,cast,genres);\r\n        movie.setCastNames(cast);\r\n        movie.setGenre(genres);\r\n        return movie;\r\n    }\r\n    static Movie getOneMovie (String title){\r\n        Movie movie = new Movie();\r\n        for (String oneMovie : movies) {\r\n            String[] arr = oneMovie.split(\",\");\r\n            if (arr[1].equals(title)) {\r\n                movie.setTitle(arr[1]);\r\n                movie.setId(Integer.parseInt(arr[0]));\r\n                movie.setRelease_date(LocalDate.parse(arr[3]));\r\n                movie.setDescription(arr[2]);\r\n                movie.setRunning_time(arr[4]);\r\n                movie.setBudget(arr[9]);\r\n                movie.setCountry(arr[8]);\r\n                movie.setLanguage(arr[6]);\r\n                movie.setImdb_score(Integer.parseInt(arr[7]));\r\n                movie.setRevenue(arr[10]);\r\n                movie.setPoster_path(arr[11]);\r\n                movie.setDirector(getDirector(arr[5]));\r\n                ArrayList<String> cast = new ArrayList<String>();\r\n                ArrayList<String> genres = new ArrayList<String>();\r\n                movie.setGenre(genres);\r\n                castAndGenres(oneMovie,cast,genres);\r\n                ArrayList<Cast> cast_obj = new ArrayList<Cast>();\r\n                for(String casts: cast){\r\n                    cast_obj.add(getCast(casts));\r\n                }\r\n            }\r\n        }\r\n        return movie;\r\n    }\r\n    public static void castAndGenres(String Movie, ArrayList<String> cast_, ArrayList<String> genres){\r\n        //cast first then genres\r\n        boolean cast = false;\r\n        boolean genre = false;\r\n        int castCounter = -1;\r\n        int genreCounter = -1;\r\n        String[] eachLine = Movie.split(\",\");\r\n        for (String data:eachLine) {\r\n            if(data.equals(\"cast\"))\r\n                cast = true;\r\n            else if(data.equals(\"genres\")) {\r\n                cast = false;\r\n                genre = true;\r\n            }\r\n            if(cast) {\r\n                castCounter++;\r\n                if(castCounter != 0)\r\n                    cast_.add(data);\r\n            }\r\n            else if(genre) {\r\n                genreCounter ++;\r\n                if(genreCounter != 0)\r\n                    genres.add(data);\r\n            }\r\n        }\r\n    }\r\n    static Director getDirector(String directorName){\r\n        Director director = new Director();\r\n        String[] name = directorName.split(\" \");\r\n        for (String oneDirector:directors){\r\n            String[] data = oneDirector.split(\",\");\r\n            if(data[1].equals(name[0]) && data[2].equals(name[1])){\r\n                director.setFirst_Name(data[1]);\r\n                director.setSecond_Name(data[2]);\r\n                director.setAge(Integer.parseInt(data[3]));\r\n                director.setGender(data[4]);\r\n                director.setNationality(data[5]);\r\n                int i = 0;\r\n                boolean foundMovies = false;\r\n                ArrayList<String> arrayList = new ArrayList<String>();\r\n                for (String cell: data){\r\n                    if(cell.equals(\"movies\")){\r\n                        i++;\r\n                        foundMovies = true;\r\n                    }\r\n                    if( i != 0 && foundMovies){\r\n                        arrayList.add(cell);\r\n                    }\r\n                }\r\n                director.setMovies(arrayList);\r\n            }\r\n        }\r\n        return director;\r\n    }\r\n    static ArrayList<Director> getAllDirectors(){\r\n        ArrayList<Director> arrayList = new ArrayList<Director>();\r\n        for(String oneDirector: directors){\r\n            String[] arr = oneDirector.split(\",\");\r\n            arrayList.add(getDirector(arr[USERNAMEINDEX]));\r\n        }\r\n        return arrayList;\r\n    }\r\n    static Cast getCast(String name){\r\n        //ArrayList<Cast> cast = new ArrayList<Cast>();\r\n        Cast eachCast = new Cast();\r\n        String[] castName = name.split(\" \");\r\n        for (String oneCast: casts){\r\n            String[] data = oneCast.split(\",\");\r\n            if(data[1].equals(castName[1]) && data[2].equals(castName[2])){\r\n                eachCast.setFirst_Name(data[1]);\r\n                eachCast.setSecond_Name(data[2]);\r\n                eachCast.setGender(data[4]);\r\n                eachCast.setAge(Integer.parseInt(data[3]));\r\n                eachCast.setNationality(data[5]);\r\n                int i = 0;\r\n                boolean foundMovies = false;\r\n                ArrayList<String> arrayList = new ArrayList<String>();\r\n                for (String cell: data){\r\n                    if(cell.equals(\"movies\")){\r\n                        i++;\r\n                        foundMovies = true;\r\n                    }\r\n                    if( i != 0 && foundMovies){\r\n                        arrayList.add(cell);\r\n                    }\r\n                }\r\n                eachCast.setMovies(arrayList);\r\n            }\r\n        }\r\n        return eachCast;\r\n    }\r\n    static ArrayList<Cast> getAllCast(){\r\n        ArrayList<Cast> allcast = new ArrayList<Cast>();\r\n        for(String oneCast: casts){\r\n            String[] arr = oneCast.split(\",\");\r\n            allcast.add(getCast(arr[USERNAMEINDEX]));\r\n        }\r\n        return allcast;\r\n    }\r\n    //name on getMovies is full name >> first and last combined.\r\n    static ArrayList<String> getMovies(String name, ArrayList<String> allMovies){\r\n        ArrayList<String> requiredMovies = new ArrayList<String>();\r\n        for (String data: allMovies){\r\n            String []arr = data.split(\",\");\r\n            for(String index: arr)\r\n                //if cast/director is on this specific movie, then i'm gonna add name of the movie to the list.\r\n                if(index.equals(name))\r\n                    requiredMovies.add(arr[1]);\r\n        }\r\n        return requiredMovies;\r\n    }\r\n    static ArrayList<User> getUsers(){\r\n        ArrayList<User> userArrayList = new ArrayList<User>();\r\n        for(int i=0; i<users.size(); i++){\r\n            String[] data =users.get(i).split(\",\");\r\n            User user = new User(data[USERNAMEINDEX], data[LASTNAMEINDEX],data[FIRSTNAMEINDEX],data[EMAILINDEX],data[PASSWORDINDEX] );\r\n            userArrayList.add(user);\r\n        }\r\n        getUsersInEachPlan();\r\n        return userArrayList;\r\n    }\r\n    public static void readMovies(File file)  {\r\n        String line = \"\";\r\n        String[] firstLine = new String[20];\r\n        String[] wholeLine = new String[20];\r\n        try{\r\n            int i = 0;\r\n            BufferedReader bufferedReader = new BufferedReader(new FileReader(file));\r\n            while((line = bufferedReader.readLine()) != null){\r\n                if(i % 2 == 0){\r\n                    firstLine = line.split(\",\");\r\n                }\r\n                else {\r\n                    wholeLine = line.split(\",\");\r\n                    //System.arraycopy(wholeLine ,0 ,firstLine ,5,16);\r\n                    firstLine = Arrays.copyOf(firstLine, firstLine.length + wholeLine.length);\r\n                    int g = 0 , k = 6;\r\n                    while(k < firstLine.length && g< wholeLine.length){\r\n                        System.out.println(g);\r\n                        firstLine[k] = wholeLine[g];\r\n                        ++g;\r\n                        ++k;\r\n                    }\r\n                    String eachLine =String.join(\",\", firstLine);\r\n                    movies.add(eachLine);\r\n                }\r\n                i++;\r\n            }\r\n        }\r\n        catch (IOException ioException){\r\n            throw new RuntimeException(ioException);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/watch_it/Admin.java b/src/main/java/com/example/watch_it/Admin.java
--- a/src/main/java/com/example/watch_it/Admin.java	(revision 43e23a2d1c357c31240e3f4692a41970ee48beb8)
+++ b/src/main/java/com/example/watch_it/Admin.java	(date 1702430362912)
@@ -467,7 +467,7 @@
         String[] name = directorName.split(" ");
         for (String oneDirector:directors){
             String[] data = oneDirector.split(",");
-            if(data[1].equals(name[0]) && data[2].equals(name[1])){
+            if(data[1].equals(name[1]) && data[2].equals(name[2])){
                 director.setFirst_Name(data[1]);
                 director.setSecond_Name(data[2]);
                 director.setAge(Integer.parseInt(data[3]));
Index: data.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>user,nada,123456,1,nada,ayman,basic,ahmad@gmail.com,2023-12-06,to be watched,titanic,watched,red 3,null, red 2,3.2\r\nuser,mai,456789,2,mai,ezz,standard,salama@gmail.com,2023-11-15,to be watched,titanic,watched,red 3,null, red 2,3.2\r\nuser,youssef,456789,3,youssef,mohsen,premium,hossam@gmail.com,2023-10-09,to be watched,titanic,watched,red 3,null, red 2,3.2\r\nuser,basmala,456789,4,basmala,tarek,basic,ismail@gmail.com,2023-09-3,to be watched,titanic,watched,red 3,null, red 2,3.2\r\nuser,tasneem,456789,545,tasneem,mohamed,premium,hossam@gmail.com,2023-10-09,to be watched,titanic,watched,red 3,null, red 2,3.2\r\nuser,youssef_,456789,4,yossef,ahmad,basic,ismail@gmail.com,2023-09-3,to be watched,titanic,watched,red 3,null, red 2,3.2\r\nuser,toka,456789,4,toka,karam,standard,ismail@gmail.com,2023-09-3,to be watched,titanic,watched,red 3,null, red 2,3.2\r\ncast,ahmad,salama,45,male,american,titanic,haha 2\r\nadmin,nada,123456\r\nadmin,mai,123456\r\ndirector,Christopher,Nolan,53,male,british,movies,The Dark Knight\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/data.txt b/data.txt
--- a/data.txt	(revision 43e23a2d1c357c31240e3f4692a41970ee48beb8)
+++ b/data.txt	(date 1702430246621)
@@ -8,5 +8,5 @@
 cast,ahmad,salama,45,male,american,titanic,haha 2
 admin,nada,123456
 admin,mai,123456
-director,Christopher,Nolan,53,male,british,movies,The Dark Knight
+director,Christopher,Nolan,53,male,british,The Dark Knight,Oppenheimer
 
Index: src/main/java/com/example/watch_it/HelloApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.watch_it;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\n\r\npublic class HelloApplication extends Application {\r\n    @Override\r\n    public void start(Stage stage) throws IOException {\r\n        File file = new File(\"data.txt\");\r\n        Admin.readFile(file);\r\n        User.allusers.addAll(Admin.getUsers());\r\n        File movieFile = new File(\"movies-data.txt\");\r\n        Admin.readMovieOneLine(movieFile);\r\n        Movie.allmovies.addAll(Admin.getMoviesObjs());\r\n        Movie.getDiffGenres();\r\n\r\n       /* File movieFile = new File(\"movies-data.txt\");\r\n        Admin.readMovieOneLine(movieFile);\r\n        Admin.getAllMovies();\r\n*/\r\n\r\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"first-page.fxml\"));\r\n        Parent root;\r\n        try {\r\n            root = loader.load();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        First controller = loader.getController();\r\n        controller.setStage(stage);\r\n        Scene scene = new Scene(root);\r\n        stage.setTitle(\"Movie\");\r\n        stage.setResizable(false);\r\n        stage.setX(-7);\r\n        stage.setY(0);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n\r\n        launch();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/watch_it/HelloApplication.java b/src/main/java/com/example/watch_it/HelloApplication.java
--- a/src/main/java/com/example/watch_it/HelloApplication.java	(revision 43e23a2d1c357c31240e3f4692a41970ee48beb8)
+++ b/src/main/java/com/example/watch_it/HelloApplication.java	(date 1702429519674)
@@ -15,6 +15,7 @@
         File file = new File("data.txt");
         Admin.readFile(file);
         User.allusers.addAll(Admin.getUsers());
+        //Director.allDirectors.addAll(Admin.)
         File movieFile = new File("movies-data.txt");
         Admin.readMovieOneLine(movieFile);
         Movie.allmovies.addAll(Admin.getMoviesObjs());
Index: movies-data.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>1,The Dark Knight,When the menace known as the Joker wreaks havoc and chaos on the people of Gotham. Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.,2008-07-23,2h:32m,Christopher Nolan,English,9,United States,565.000.000 M,2.437.724.184 B,movies/the dark knight.jpeg,cast,Christian Bale,Morgan Freeman,Cillian Murphy,genres,action,crime,drama,thriller\r\n2,Oppenheimer,The story of American scientist. J. Robert Oppenheimer. and his role in the development of the atomic bomb.,2023-11-21,3h,Christopher Nolan,English,8,United States,100.000.000M,2.437.724 M,movies/Oppenheimer.jpeg,cast,Robert Downey Jr.,Matt Damon,Cillian Murphy,genres,drama,history,biography\r\n3,Sherlock Holmes,Detective Sherlock Holmes and his stalwart partner Watson engage in a battle of wits and brawn with a nemesis whose plot is a threat to all of England.,2009-12-30,2h:8m,Guy Ritchie,English,8,England,90.000.000 M,112.190.000 M,movies/Sherlock_Holmes.jpeg,cast,Robert Downey Jr,Mark Strong,Jude Law,genres,action,adventure,mystery\r\n4,Avengers: Endgame,After the devastating events of Avengers: Infinity War (2018). the universe is in ruins. With the help of remaining allies. the Avengers assemble once more in order to reverse Thanos' actions and restore balance to the universe.,2019-04-26,3h:1m,Anthony Russo,English,8,United States,90.000.000 M,112.190.000 M,movies/endgame.jpeg,cast,Robert Downey Jr,Benedict Cumberbatch,Chris Hemsworth,genres,action,adventure,drama
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/movies-data.txt b/movies-data.txt
--- a/movies-data.txt	(revision 43e23a2d1c357c31240e3f4692a41970ee48beb8)
+++ b/movies-data.txt	(date 1702430199596)
@@ -1,4 +1,7 @@
 1,The Dark Knight,When the menace known as the Joker wreaks havoc and chaos on the people of Gotham. Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.,2008-07-23,2h:32m,Christopher Nolan,English,9,United States,565.000.000 M,2.437.724.184 B,movies/the dark knight.jpeg,cast,Christian Bale,Morgan Freeman,Cillian Murphy,genres,action,crime,drama,thriller
 2,Oppenheimer,The story of American scientist. J. Robert Oppenheimer. and his role in the development of the atomic bomb.,2023-11-21,3h,Christopher Nolan,English,8,United States,100.000.000M,2.437.724 M,movies/Oppenheimer.jpeg,cast,Robert Downey Jr.,Matt Damon,Cillian Murphy,genres,drama,history,biography
 3,Sherlock Holmes,Detective Sherlock Holmes and his stalwart partner Watson engage in a battle of wits and brawn with a nemesis whose plot is a threat to all of England.,2009-12-30,2h:8m,Guy Ritchie,English,8,England,90.000.000 M,112.190.000 M,movies/Sherlock_Holmes.jpeg,cast,Robert Downey Jr,Mark Strong,Jude Law,genres,action,adventure,mystery
-4,Avengers: Endgame,After the devastating events of Avengers: Infinity War (2018). the universe is in ruins. With the help of remaining allies. the Avengers assemble once more in order to reverse Thanos' actions and restore balance to the universe.,2019-04-26,3h:1m,Anthony Russo,English,8,United States,90.000.000 M,112.190.000 M,movies/endgame.jpeg,cast,Robert Downey Jr,Benedict Cumberbatch,Chris Hemsworth,genres,action,adventure,drama
\ No newline at end of file
+4,Avengers: Endgame,After the devastating events of Avengers: Infinity War (2018). the universe is in ruins. With the help of remaining allies. the Avengers assemble once more in order to reverse Thanos' actions and restore balance to the universe.,2019-04-26,3h:1m,Anthony Russo,English,8,United States,90.000.000 M,112.190.000 M,movies/endgame.jpeg,cast,Robert Downey Jr,Benedict Cumberbatch,Chris Hemsworth,genres,action,adventure,drama
+6,Home Alone,An eight-year-old troublemaker. mistakenly left home alone. must defend his home against a pair of burglars on Christmas eve.,1991-07-22,1h:43m,Chris Columbus,English,7,United Stated,90.000.000 M,112.190.000 M,movies/home alone.jpeg,cast,Macaulay Culkin,Daniel Stern,Joe Pesci,genres,comedy,family
+5,Joker,During the 1980s a failed stand-up comedian is driven insane and turns to a life of crime and chaos in Gotham City while becoming an infamous psychopathic crime figure.,2019-10-04,2h:2m,Todd Phillips,English,8,United States,100.000.000M,2.437.724 M,movies/joker.jpeg,cast,Joaquin Phoenix,Robert De Niro,genres,crime,drama,thriller
+7,Insidious: The Red Door,The Lamberts must go deeper into The Further than ever before to put their demons to rest once and for all.,2023-07-07,1h:47m,Patrick Wilson,English,5,Unitied States,100.000.000M,2.437.724 M,movies/red_door.jpeg,cast,Patrick Wilson,Rose Byrne,genres,horror,mystery,thriller
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"236de910-bb88-43c2-a220-e8030a7a2c95\" name=\"Changes\" comment=\"added choose plan\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/watch_it/FilterPage.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/watch_it/FilterPage.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/watch_it/MainPageController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/watch_it/MainPageController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/watch_it/MovieController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/watch_it/MovieController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/watch_it/WatchLater.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/watch_it/WatchLater.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/watch_it/WatchRecord.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/watch_it/WatchRecord.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"FxmlFile\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;Nada-Hany&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">\r\n    <option name=\"selectedUrlAndAccountId\">\r\n      <UrlAndAccount>\r\n        <option name=\"accountId\" value=\"cc5d3d54-1728-462d-8317-3b96966b79fa\" />\r\n        <option name=\"url\" value=\"https://github.com/Youssef-Mohsen/Watch_It.git\" />\r\n      </UrlAndAccount>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 8\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2YeFVvR1cMbdmzoU0JjHSXbxBBy\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/programming/java/Watch_It/src/main/java/com/example/watch_it&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.JavaFX&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\programming\\java\\Watch_It\\src\\main\\java\\com\\example\\watch_it\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\programming\\java\\Watch_It\\src\\main\\resources\\com\\example\\watch_it\" />\r\n      <recent name=\"C:\\programming\\java\\Watch_It\\src\\main\\java\\com\\example\\watch_it\" />\r\n      <recent name=\"C:\\programming\\java\\Watch_It\\src\\main\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"HelloApplication\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.example.watch_it.HelloApplication\" />\r\n      <module name=\"Watch_IT\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.example.watch_it.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"JetRunConfigurationType\">\r\n      <module name=\"Watch_It\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"KotlinStandaloneScriptRunConfigurationType\">\r\n      <module name=\"Watch_It\" />\r\n      <option name=\"filePath\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.HelloApplication\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"236de910-bb88-43c2-a220-e8030a7a2c95\" name=\"Changes\" comment=\"\" />\r\n      <created>1700878165910</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1700878165910</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"add admin class\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1700881919077</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1700881919077</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"add cast, director and artist classes\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1701195323300</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1701195323300</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"integration\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1701195620613</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1701195620613</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"handling everything in one file\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1701306289338</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1701306289338</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"getting the month with most revenue\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1701479503607</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1701479503607</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"main class\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1701480011804</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1701480011804</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"add first page gui\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1702240257713</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702240257714</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"reading movies\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1702329606254</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702329606254</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"added choose plan\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1702426550817</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702426550818</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"10\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"add admin class\" />\r\n    <MESSAGE value=\"add cast, director and artist classes\" />\r\n    <MESSAGE value=\"integration\" />\r\n    <MESSAGE value=\"handling everything in one file\" />\r\n    <MESSAGE value=\"getting the month with most revenue\" />\r\n    <MESSAGE value=\"main class\" />\r\n    <MESSAGE value=\"add first page gui\" />\r\n    <MESSAGE value=\"reading movies\" />\r\n    <MESSAGE value=\"added choose plan\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"added choose plan\" />\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 43e23a2d1c357c31240e3f4692a41970ee48beb8)
+++ b/.idea/workspace.xml	(date 1702430352123)
@@ -4,13 +4,12 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="236de910-bb88-43c2-a220-e8030a7a2c95" name="Changes" comment="added choose plan">
+    <list default="true" id="236de910-bb88-43c2-a220-e8030a7a2c95" name="Changes" comment="filteration page">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/watch_it/FilterPage.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/watch_it/FilterPage.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/watch_it/MainPageController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/watch_it/MainPageController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/watch_it/MovieController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/watch_it/MovieController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/watch_it/WatchLater.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/watch_it/WatchLater.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/watch_it/WatchRecord.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/watch_it/WatchRecord.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/data.txt" beforeDir="false" afterPath="$PROJECT_DIR$/data.txt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/movies-data.txt" beforeDir="false" afterPath="$PROJECT_DIR$/movies-data.txt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/watch_it/Admin.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/watch_it/Admin.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/watch_it/HelloApplication.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/watch_it/HelloApplication.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -187,7 +186,15 @@
       <option name="project" value="LOCAL" />
       <updated>1702426550818</updated>
     </task>
-    <option name="localTasksCounter" value="10" />
+    <task id="LOCAL-00010" summary="filteration page">
+      <option name="closed" value="true" />
+      <created>1702427708735</created>
+      <option name="number" value="00010" />
+      <option name="presentableId" value="LOCAL-00010" />
+      <option name="project" value="LOCAL" />
+      <updated>1702427708735</updated>
+    </task>
+    <option name="localTasksCounter" value="11" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -211,7 +218,8 @@
     <MESSAGE value="add first page gui" />
     <MESSAGE value="reading movies" />
     <MESSAGE value="added choose plan" />
-    <option name="LAST_COMMIT_MESSAGE" value="added choose plan" />
+    <MESSAGE value="filteration page" />
+    <option name="LAST_COMMIT_MESSAGE" value="filteration page" />
   </component>
   <component name="XSLT-Support.FileAssociations.UIState">
     <expand />
